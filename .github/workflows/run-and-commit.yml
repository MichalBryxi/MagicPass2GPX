name: Run script, build preview, update README

on:
  workflow_dispatch: {}
  schedule:
    - cron: "0 17 * * 0" # Sundays 19:00 Europe/Zurich (UTC cron)

permissions:
  contents: write

env:
  README_PATH: "README.md"
  PREVIEW_PATH: "Magic Pass.preview.geojson"

jobs:
  run-and-commit:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Sync with latest main (rebase)
        run: |
          git fetch origin main
          git checkout main
          git pull --rebase origin main

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Create .env from GitHub Secrets
        run: |
          printf "API_KEY=%s\n" "${{ secrets.API_KEY }}" > .env

      - name: Run script (produces GPX + .preview.geojson)
        run: bundle exec ruby index.rb

      - name: Update README map block (between markers)
        run: |
          python3 - <<'PY'
          import os, re

          readme_path = os.environ["README_PATH"]
          preview_path = os.environ["PREVIEW_PATH"]

          START = "<!-- BEGIN: AUTO-GEOJSON -->"
          END   = "<!-- END: AUTO-GEOJSON -->"

          if not os.path.exists(preview_path):
            raise SystemExit(f"Preview file not found: {preview_path}")

          with open(preview_path, "r", encoding="utf-8") as f:
            preview = f.read().strip()

          if os.path.exists(readme_path):
            with open(readme_path, "r", encoding="utf-8") as f:
              text = f.read()
          else:
            text = "# MagicPass2GPX\n\n"

          block = f"{START}\n```geojson\n{preview}\n```\n{END}"

          if START in text and END in text:
            pat = re.compile(re.escape(START) + r".*?" + re.escape(END), re.S)
            text = pat.sub(lambda m: block, text)
          else:
            text += (
              "\n## Route preview\n\n"
              f"{block}\n\n"
              f"> This map block is auto-updated weekly.\n\n"
            )

          with open(readme_path, "w", encoding="utf-8") as f:
            f.write(text)
          PY

      - name: Commit & push (always; with rebase+retry)
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit --allow-empty -m "chore: refresh outputs & README [skip ci] $(date -u +%F)"
          for i in 1 2 3; do
            if git push origin HEAD:main; then
              exit 0
            fi
            echo "Push failed (attempt $i) â€” rebasing and retrying..."
            git pull --rebase origin main || { git rebase --abort || true; }
          done
          echo "Push still failing after retries." >&2
          exit 1
